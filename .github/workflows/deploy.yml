---
name: Deploy

on:
  release:
    types:
      - released

concurrency: Deploy

jobs:
  Docker:
    outputs:
      image: ${{ steps.export.outputs.image }}
      tag: ${{ steps.export.outputs.tag }}

    permissions:
      contents: read
      packages: write

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install (Buildx)
        uses: docker/setup-buildx-action@v2

      - name: Install (Flyctl)
        uses: superfly/flyctl-actions/setup-flyctl@master

      - id: meta
        name: Tag
        uses: docker/metadata-action@v4
        with:
          flavor: |
            latest=true
          images: |
            registry.fly.io/scrooge
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha

      - name: Login (Fly)
        run: |
          flyctl auth docker -t ${{ secrets.FLY_API_TOKEN }}

      - name: Login (GHCR)
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        uses: docker/build-push-action@v3
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: .
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}

      - id: export
        name: Export
        uses: actions/github-script@v6
        with:
          script: |
            const metadata = JSON.parse(`${{ steps.meta.outputs.json }}`)
            const fullUrl = metadata.tags.find((t) => {
              return t.startsWith('registry.fly.io/atcms:sha-')
            })

            if (fullUrl == null) {
              core.error('Unable to find sha tag of image')
            } else {
              const tag = fullUrl.split(':')[1]
              core.setOutput('image', fullUrl)
              core.setOutput('tag', tag)
            }

  Deploy:
    environment:
      name: Production
      url: https://scrooge.life

    needs: Docker
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install (Flyctl)
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy
        run: |
          flyctl deploy \
            --access-token ${{ secrets.FLY_API_TOKEN }} \
            --image ${{ needs.Docker.outputs.image }}

  Docs:
    environment:
      name: Docs
      url: https://docs.scrooge.life

    permissions:
      pages: write
      id-token: write

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - id: beam
        name: Install (Elixir)
        uses: erlef/setup-beam@v1
        with:
          version-file: .tool-versions
          version-type: strict

      - name: Install (Mix)
        run: mix deps.get

      - name: Setup Pages
        uses: actions/configure-pages@v2

      - name: Build
        run: mix docs

      - name: Upload pages
        uses: actions/upload-pages-artifact@v1
        with:
          path: ./doc

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
